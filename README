# Zoppy CRUD - Clientes

Este projeto foi desenvolvido como parte de um desafio técnico com foco na stack usada pela empresa Zoppy. A proposta consiste em um sistema completo de cadastro de clientes com funcionalidades de criação, edição, remoção, listagem e busca. Inclui testes unitários, containerização com Docker e boas práticas de arquitetura e experiência do usuário. Utilizei a estrutura do MonoRepo para a minha aplicação.

---

## 🚀 Stack Tecnológica

- **Backend:** Node.js, NestJS 10, Sequelize ORM, MySQL  
- **Frontend:** Angular 19, TailwindCSS, RxJS  
- **Testes:** Jest (Cobertura superior a 80%)  
- **Containerização:** Docker & Docker Compose  

---

## 📄 Funcionalidades Implementadas

### CRUD de Clientes

- **Listagem paginada e com busca** por nome/email  
- **Criação de cliente** com dados:  
  - nome  
  - email  
  - telefone  
  - empresa  
  - CEP  
  - CNPJ  
- **Edição de cliente** com preenchimento automático do form  
- **Exclusão de cliente** com confirmação  

### Extras (Frontend)

- Estilização com **TailwindCSS**  
- Responsividade com abordagem **mobile first**  
- Filtro reativo com **debounce**  
- Componentes com controle de estado via **RxJS + Observables**  

### Extras (Backend)

- Testes unitários com Jest (>80% de cobertura)  
- Controle de paginação (`page` + `limit` via query params)  
- Filtro de busca por nome/email  
- Sequelize com MySQL e **migração automática**  
- Ambiente de execução isolado via Docker  

---

## 📅 Como rodar com Docker (recomendado)

```bash
docker compose up -d --build
docker-compose up -d
```

- Frontend: [http://localhost:4200](http://127.0.0.1:4200)  
- Backend: [http://backend:3050](http://localhost:3050)  
- MySQL: acessível via porta **3307** (ex: `localhost:3307`, user: `root`, senha: `root`)

Para resetar o ambiente:

```bash
docker-compose down --volumes --remove-orphans
docker compose up -d --build
docker-compose up -d
```

---

## ⚙️ Como rodar localmente (sem Docker)

### Backend (porta 3050)

```bash
cd backend
npm install
npm run start
```

### Frontend (porta 4200)

```bash
cd frontend
npm install
npm start
```

Acesse: [http://localhost:4200](http://localhost:4200)

---

## 📆 Estrutura do Projeto

```
├── backend
│   ├── src
│   │   ├── client
│   │   │   ├── client.controller.ts
│   │   │   ├── client.service.ts
│   │   │   └── dto/*.ts
│   │   └── main.ts
│   ├── test
│   │   └── unit tests com Jest
│   └── Dockerfile
├── frontend
│   ├── src
│   │   ├── app
│   │   │   ├── components
│   │   │   ├── pages
│   │   │   └── services
│   ├── tailwind.config.js
│   └── Dockerfile
├── docker-compose.yml
└── README.md
```

---

## 💡 Observações

- A aplicação está funcional, responsiva e com testes.
- O banco de dados é inicializado apenas via Docker.
- Foram usados `rxjs`, `debounceTime` e `BehaviorSubject` para filtros no frontend.
- A estrutura do NestJS segue boas práticas de separação de módulos e injeção de dependência.
- A aplicação está pronta para expansão, inclusive para um segundo CRUD (ex: Produtos ou Pedidos) se for necessário.

---

## 🔧 Contato

Desenvolvido por **Davi Quaresma** – [LinkedIn](https://www.linkedin.com/in/daviquaresma)

> Em caso de dúvidas ou problemas para execução, entre em contato ou abra uma issue no repositório.

---

> _"A simplicidade é a sofisticação máxima."_  
> — Leonardo da Vinci
